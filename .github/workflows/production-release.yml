name: ðŸš€Production Release


env:
  PROJECT_NAME: KDActionUtils
  NET_SDK_VERSION: 6.0.300


on:
  workflow_dispatch: # Production releases are only done manually


jobs:
  determine_build_config:
      name: Determine Build Configuration
      runs-on: ubuntu-latest
      outputs:
        build-config: ${{ steps.get-build-config.outputs.build-config }}
      steps:
        - name: Get Build Config
          id: get-build-config
          shell: pwsh
          run: |
            # If the destination branch that the pull request is merging into is the master, do a release build
            if ( "${{ github.base_ref }}" -eq "master") {
              Write-Host "::set-output name=build-config::Release";
            } else { # Any other branch than master, do a debug build
              Write-Host "::set-output name=build-config::Debug";
            }

  get_sdk_version:
    name: Get SDK Version
    runs-on: ubuntu-latest
    outputs:
      sdk-version: ${{ steps.get-sdk-version.outputs.sdk-version }}
    steps:
      - name: Get SDK Version From Environment Variable
        id: get-sdk-version
        shell: pwsh
        run: Write-Host "::set-output name=sdk-version::${{ env.NET_SDK_VERSION }}";

  resolve_project_file: # Output name is 'project-file-path'
    name: Resolve Project File Path
    uses: KinsonDigital/Infrastructure/.github/workflows/resolve-csharp-proj-file.yml@v3.0.0
    with:
      project-name: KDActionUtils

  get_version_from_project_file:
    name: Get Version From Project File
    runs-on: ubuntu-latest # Cannot use windows
    needs: resolve_project_file
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
    - uses: actions/checkout@v2

    - name: Get Version From C# Project File
      id: get-version
      uses: KinsonDigital/VersionMiner@v1.0.0-preview.2
      with:
        repo-owner: KinsonDigital
        repo-name: ${{ env.PROJECT_NAME }}
        branch-name: "${{ github.ref }}"
        file-format: xml
        file-path: "${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj"
        version-keys: Version
        trim-start-from-branch: refs/heads/

  build_main_project:
    name: Build KDActionUtils Project
    needs: [determine_build_config, get_sdk_version]
    uses: KinsonDigital/Infrastructure/.github/workflows/build-csharp-project.yml@v2.0.0
    with:
      project-name: KDActionUtils
      build-config: ${{ needs.determine_build_config.outputs.build-config }}
      net-sdk-version: ${{ needs.get_sdk_version.outputs.sdk-version }}

  build_test_project:
    name: Build KDActionUtils Tests Project
    needs: [determine_build_config, get_sdk_version]
    uses: KinsonDigital/Infrastructure/.github/workflows/build-csharp-project.yml@v2.0.0
    with:
      project-name: KDActionUtilsTests
      build-config: ${{ needs.determine_build_config.outputs.build-config }}
      net-sdk-version: ${{ needs.get_sdk_version.outputs.sdk-version }}

  run_tests:
    name: Run Tests
    needs: [determine_build_config, get_sdk_version, build_main_project, build_test_project]
    uses: KinsonDigital/Infrastructure/.github/workflows/run-csharp-tests.yml@v2.0.0
    with:
      project-name: KDActionUtilsTests
      build-config: ${{ needs.determine_build_config.outputs.build-config }}
      net-sdk-version: ${{ needs.get_sdk_version.outputs.sdk-version }}

  publish_nuget_package:
    name: Publish NuGet Package
    runs-on: ubuntu-latest
    needs: [
      determine_build_config,
      get_version_from_project_file,
      resolve_project_file,
      build_main_project,
      build_test_project,
      run_tests]
    steps:
    - uses: actions/checkout@v2

    - name: Setup Nuget
      uses: NuGet/setup-nuget@v1.0.5

    - name: Create Nuget Package
      run: dotnet pack "${{ needs.resolve_project_file.outputs.project-file-path }}" -o "${{ github.workspace }}" -c ${{ needs.determine_build_config.outputs.build-config }}

    - name: Publish Nuget Package
      run: dotnet nuget push "${{ github.workspace }}/KinsonDigital.${{ env.PROJECT_NAME }}.${{ needs.get_version_from_project_file.outputs.version }}.nupkg" `
        --api-key ${{ secrets.NUGET_ORG_API_KEY }} `
        --source https://api.nuget.org/v3/index.json
