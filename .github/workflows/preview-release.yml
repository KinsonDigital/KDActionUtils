name: ðŸš€Preview Release


env:
  PROJECT_NAME: KDActionUtils
  NET_SDK_VERSION: 6.0.300


on:
  workflow_dispatch: # Preview releases are only done manually


jobs:
  collect_release_data: # Collects all of the required information for the purpose of the release
    name: Collect Data For Release
    runs-on: ubuntu-latest
    outputs:
      build-config: ${{ steps.get-build-config.outputs.build-config }}
      sdk-version: ${{ steps.get-sdk-version.outputs.sdk-version }}
      proj-version: ${{ steps.get-proj-version.outputs.version }}
    steps:
    - uses: actions/checkout@v2

    - name: Get Build Config # TODO: Once BranchValidator is put into use, delete this
      id: get-build-config
      shell: pwsh
      run: |
        # If the destination branch that the pull request is merging into is the master, do a release build
        if ("${{ github.ref }}" -eq "master") {
          Write-Host "::set-output name=build-config::Release";
        } else { # Any other branch than master, do a debug build
          Write-Host "::set-output name=build-config::Debug";
        }    

    - name: Get SDK Version From Environment Variable
      id: get-sdk-version
      shell: pwsh
      run: Write-Host "::set-output name=sdk-version::${{ env.NET_SDK_VERSION }}";

    - name: Get Version From C# Project File
      id: get-proj-version
      uses: KinsonDigital/VersionMiner@v1.0.0-preview.2
      with:
        repo-owner: KinsonDigital
        repo-name: ${{ env.PROJECT_NAME }}
        branch-name: "${{ github.ref }}"
        file-format: xml
        file-path: "${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj"
        version-keys: Version
        trim-start-from-branch: refs/heads/


  print_collected_data: # Print the collection results
    name: Print Collected Data
    runs-on: ubuntu-latest
    needs: collect_release_data
    steps:
    - name: Print Data
      shell: pwsh
      run: |
        Write-Host "Build Config: ${{ needs.collect_release_data.outputs.build-config }}";
        Write-Host "SDK Version: ${{ needs.collect_release_data.outputs.sdk-version }}";
        Write-Host "Project Version: ${{ needs.collect_release_data.outputs.proj-version }}";


  # TODO: Add validation job here.  Validate branch name, version, if nuget exists, if github release exists, etc.
  #       This would be TagVerifier, BranchValidator, VersionValidator, GitHubReleaseChecker, GotNuget, etc, 
  #       Try to get all of the jobs to run asynchronously.  Have one single job print all of the results,
  #       and then have the rest of the jobs below depend on the print job.  This will allow async runs of the jobs.


  build_main_project: # Build the main project
    name: Build KDActionUtils Project
    needs: [collect_release_data]
    uses: KinsonDigital/Infrastructure/.github/workflows/build-csharp-project.yml@v2.0.0
    with:
      project-name: KDActionUtils
      build-config: ${{ needs.collect_release_data.outputs.build-config }}
      net-sdk-version: ${{ needs.collect_release_data.outputs.sdk-version }}


  build_test_project: # Build the test project
    name: Build KDActionUtils Tests Project
    needs: [collect_release_data]
    uses: KinsonDigital/Infrastructure/.github/workflows/build-csharp-project.yml@v2.0.0
    with:
      project-name: KDActionUtilsTests
      build-config: ${{ needs.collect_release_data.outputs.build-config }}
      net-sdk-version: ${{ needs.collect_release_data.outputs.sdk-version }}


  run_tests: # Run the unit tests
    name: Run Tests
    needs: [build_main_project, build_test_project]
    uses: KinsonDigital/Infrastructure/.github/workflows/run-csharp-tests.yml@v2.0.0
    with:
      project-name: KDActionUtilsTests
      build-config: ${{ needs.collect_release_data.outputs.build-config }}
      net-sdk-version: ${{ needs.collect_release_data.outputs.sdk-version }}


  publish_github_release: # Create GitHub release
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: [collect_release_data, run_tests]
    steps:
    - uses: actions/checkout@v2

    - name: Publish GitHub Release
      uses: softprops/action-gh-release@v0.1.14
      with:
        name: "ðŸš€Preview Release - v${{ needs.collect_release_data.outputs.proj-version }}"
        token: ${{ secrets.REPO_TOKEN }} # secrets.GITHUB_TOKEN will not work here if the project has protected branches setup
        tag_name: v${{ needs.collect_release_data.outputs.proj-version }}
        body_path: "${{ github.workspace }}/Documentation/ReleaseNotes/PreviewReleases/Release-Notes-v${{ needs.collect_release_data.outputs.proj-version }}.md"
        files: "${{ github.workspace }}/Documentation/ReleaseNotes/PreviewReleases/Release-Notes-v${{ needs.collect_release_data.outputs.proj-version }}.md"
        prerelease: true


  publish_nuget_package: # Publish the nuget package to nuget.org
    name: Publish NuGet Package
    runs-on: ubuntu-latest
    needs: [collect_release_data, run_tests]
    steps:
    - uses: actions/checkout@v2

    - name: Setup Nuget
      uses: NuGet/setup-nuget@v1.0.5

    - name: Create Nuget Package
      run: dotnet pack "${{ needs.collect_release_data.outputs.project-file-path }}" -o "${{ github.workspace }}" -c ${{ needs.collect_release_data.outputs.build-config }}

    - name: Publish Nuget Package
      run: dotnet nuget push "${{ github.workspace }}/KinsonDigital.${{ env.PROJECT_NAME }}.${{ needs.collect_release_data.outputs.proj-version }}.nupkg" `
        --api-key ${{ secrets.NUGET_ORG_API_KEY }} `
        --source https://api.nuget.org/v3/index.json
